import os
import logging
import asyncio
import os.path as op
import tempfile

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from aiohttp import web

# ==== –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ====
TOKEN = os.environ["BOT_TOKEN"]  # –∑–∞–¥–∞–º –Ω–∞ Render
PUBLIC_URL = os.environ["WEBHOOK_URL"].rstrip("/")  # https://<service>.onrender.com
PORT = int(os.environ.get("PORT", 10000))
PRICE_PER_CM3 = float(os.environ.get("PRICE_PER_CM3", "0.15"))  # ‚Ç¨ –∑–∞ —Å–º¬≥

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("3dprint-bot")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ü—Ä–∏—à–ª–∏ –º–Ω–µ STL-—Ñ–∞–π–ª (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç), –∏ —è –ø–æ—Å—á–∏—Ç–∞—é –æ–±—ä—ë–º –∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å 3D-–ø–µ—á–∞—Ç–∏."
    )


# ---- –æ–±—Ä–∞–±–æ—Ç–∫–∞ STL ----
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    filename = (doc.file_name or "").lower()
    if not filename.endswith(".stl"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .stl")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    file = await doc.get_file()
    fd, tmp_path = tempfile.mkstemp(suffix=".stl")
    os.close(fd)  # –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä ‚Äî –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—É—Ç–∏
    try:
        await file.download_to_drive(tmp_path)

        # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å —Å—Ç–∞—Ä—Ç (–∏ –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏ –¥–µ—Ä–∂–∞—Ç—å –Ω–∞ —Ö–æ–ª–æ—Å—Ç–æ–º —Ö–æ–¥—É)
        import trimesh

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç–∫—É (—Å –∑–∞—â–∏—Ç–æ–π)
        mesh = trimesh.load(tmp_path, force="mesh")  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ –º–µ—à
        if mesh is None or mesh.is_empty:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ STL. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª.")
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—á–∏–Ω–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π –¥—ã—Ä/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–µ–π)
        try:
            mesh.remove_unreferenced_vertices()
            mesh.remove_duplicate_faces()
            mesh.fill_holes()  # –º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º
        except Exception:
            pass

        # –û–±—ä—ë–º –≤ –º–º¬≥ ‚Üí —Å–º¬≥
        volume_mm3 = float(mesh.volume)
        volume_cm3 = volume_mm3 / 1000.0

        price = volume_cm3 * PRICE_PER_CM3

        await update.message.reply_text(
            f"üì¶ –û–±—ä—ë–º –º–æ–¥–µ–ª–∏: {volume_cm3:.2f} —Å–º¬≥\n"
            f"üí∂ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {price:.2f} ‚Ç¨\n\n"
            f"‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ: {PRICE_PER_CM3:.2f} ‚Ç¨/—Å–º¬≥ (–±–µ–∑ —É—á—ë—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–µ–∫ –∏ –∏–Ω—Ñ–∏–ª–ª–∞)"
        )

    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ STL")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        try:
            if op.exists(tmp_path):
                os.remove(tmp_path)
        except Exception:
            pass

async def healthcheck(request):
    return web.Response(text="OK")


async def run_bot():
    app = ApplicationBuilder().token(TOKEN).build()

    # handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    # --- WEBHOOK ---
    webhook_path = f"/webhook/{TOKEN.split(':')[0]}"

    # —Å–æ–∑–¥–∞—ë–º aiohttp web-—Å–µ—Ä–≤–µ—Ä
    web_app = web.Application()
    web_app.router.add_get("/ping", healthcheck)

    # endpoint –¥–ª—è Telegram webhook
    async def telegram_webhook(request):
        data = await request.json()
        await app.update_queue.put(Update.de_json(data, app.bot))
        return web.Response(text="ok")

    web_app.router.add_post(webhook_path, telegram_webhook)

    # –∑–∞–ø—É—Å–∫–∞–µ–º webhook –∏ aiohttp –≤–º–µ—Å—Ç–µ
    await app.bot.delete_webhook()
    await app.bot.set_webhook(f"{PUBLIC_URL}{webhook_path}")
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    print(f"‚úÖ Bot is running on {PUBLIC_URL}{webhook_path}")
    await app.initialize()
    await app.start()
    await asyncio.Event().wait()  # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º


def main():
    asyncio.run(run_bot())



if __name__ == "__main__":
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å–æ–±—ã—Ç–∏–π
    try:
        main()
    except KeyboardInterrupt:
        pass
