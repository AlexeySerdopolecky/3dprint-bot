import os
import logging
import asyncio
import os.path as op
import tempfile

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from aiohttp import web

# ==== –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ====
TOKEN = os.environ["BOT_TOKEN"]                     # Render: env var
PUBLIC_URL = os.environ["WEBHOOK_URL"].rstrip("/")  # https://<service>.onrender.com
PORT = int(os.environ.get("PORT", 10000))
PRICE_PER_CM3 = float(os.environ.get("PRICE_PER_CM3", "0.15"))  # ‚Ç¨ –∑–∞ —Å–º¬≥

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("life3done-bot")

# ==== CALLBACK KEYS ====
CB_MAIN = "main"
CB_MENU = "menu"
CB_FREE = "free_models"
CB_CALC = "calc"
CB_CONTACTS = "contacts"
CB_BACK = "back"
CB_ABOUT = "about"

# ==== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß≠ –ú–µ–Ω—é", callback_data=CB_MENU)],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data=CB_ABOUT)],
        [InlineKeyboardButton("üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url="https://t.me/oleksiiserdopoletskyi")],
    ])

def kb_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÇ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–æ–ª–∏–∫–æ–≤", callback_data=CB_FREE)],
        [InlineKeyboardButton("‚öôÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å—á—ë—Ç 3D-–ø–µ—á–∞—Ç–∏", callback_data=CB_CALC)],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏", callback_data=CB_CONTACTS)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=CB_BACK)],
    ])

def kb_free_models() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìé –ò–∑–ª—É—á–∞—Ç–µ–ª—å —É–∑–∫–∏–π", url="https://www.dropbox.com/scl/fi/fwsqvdn2adhsgsdk02wut/07.02.01.01.010.STL?rlkey=42hno4nt84g8n8n6m0cjx46mz&dl=0")],
        [InlineKeyboardButton("üìé –ü—Ä–∏—ë–º–Ω–∏–∫ —É–∑–∫–∏–π", url="https://www.dropbox.com/scl/fi/xnk1eybil4i59uqi5p5pn/07.02.01.02.010.STL?rlkey=rjx1v5e8d7anq1dv51py0fcfi&dl=0")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=CB_MENU)],
    ])

def kb_calc_back() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=CB_MENU)],
    ])

def kb_contacts() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ Telegram", url="https://t.me/oleksiiserdopoletskyi")],
        [InlineKeyboardButton("üì∏ Instagram", url="https://www.instagram.com/alekseipoletskii")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=CB_MENU)],
    ])

# ==== HANDLERS ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message:
            await update.message.delete()
    except Exception:
        pass

    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç *Life3Done*.\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–æ–ª–∏–∫–æ–≤ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–≤–æ–µ–π 3D-–¥–µ—Ç–∞–ª–∏."
    )
    if update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=kb_main(),
            parse_mode="Markdown"
        )

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()

    data = query.data

    if data in (CB_MAIN, CB_BACK):
        await query.message.edit_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç *Life3Done*.\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–æ–ª–∏–∫–æ–≤ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–≤–æ–µ–π 3D-–¥–µ—Ç–∞–ª–∏.",
            reply_markup=kb_main(),
            parse_mode="Markdown",
        )
        return

    if data == CB_MENU:
        await query.message.edit_text(
            "üß≠ *–ú–µ–Ω—é* ‚Äî –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=kb_menu(),
            parse_mode="Markdown",
        )
        return

    if data == CB_FREE:
        await query.message.edit_text(
            "üìÇ *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–æ–ª–∏–∫–æ–≤* ‚Äî –≤—ã–±–µ—Ä–∏ —Ñ–∞–π–ª:",
            reply_markup=kb_free_models(),
            parse_mode="Markdown",
        )
        return

    if data == CB_CALC:
        await query.message.edit_text(
            "‚öôÔ∏è *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å—á—ë—Ç 3D-–ø–µ—á–∞—Ç–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å STL-—Ñ–∞–π–ª *–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç*, –∏ —è –ø–æ—Å—á–∏—Ç–∞—é –æ–±—ä—ë–º –∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
            reply_markup=kb_calc_back(),
            parse_mode="Markdown",
        )
        return

    if data == CB_CONTACTS:
        await query.message.edit_text(
            "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:*",
            reply_markup=kb_contacts(),
            parse_mode="Markdown",
        )
        return

    if data == CB_ABOUT:
        await query.message.edit_text(
            "‚ÑπÔ∏è *–û –ø—Ä–æ–µ–∫—Ç–µ*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö 3D-–º–æ–¥–µ–ª–µ–π, "
            "–∞ —Ç–∞–∫–∂–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π 3D-–ø–µ—á–∞—Ç–∏. "
            "–¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ 3D-–ø–µ—á–∞—Ç—å –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å —É–¥–æ–±–Ω–µ–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=CB_BACK)]]),
            parse_mode="Markdown",
        )
        return

# ---- –æ–±—Ä–∞–±–æ—Ç–∫–∞ STL ----
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc:
        return

    filename = (doc.file_name or "").lower()
    if not filename.endswith(".stl"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .stl")
        return

    if doc.file_size and doc.file_size > 30 * 1024 * 1024:
        await update.message.reply_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å STL –¥–æ 30 –ú–ë.")
        return

    file = await doc.get_file()
    fd, tmp_path = tempfile.mkstemp(suffix=".stl")
    os.close(fd)
    try:
        await file.download_to_drive(tmp_path)

        import trimesh

        mesh = trimesh.load(tmp_path, force="mesh")
        if mesh is None or mesh.is_empty:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ STL. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª.")
            return

        try:
            mesh.remove_unreferenced_vertices()
            mesh.remove_duplicate_faces()
            mesh.fill_holes()
        except Exception:
            pass

        volume_mm3 = float(mesh.volume)
        volume_cm3 = volume_mm3 / 1000.0
        price = volume_cm3 * PRICE_PER_CM3

        await update.message.reply_text(
            f"üì¶ –û–±—ä—ë–º –º–æ–¥–µ–ª–∏: {volume_cm3:.2f} —Å–º¬≥\n"
            f"üí∂ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {price:.2f} ‚Ç¨\n\n"
            f"‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ: {PRICE_PER_CM3:.2f} ‚Ç¨/—Å–º¬≥ (–±–µ–∑ —É—á—ë—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–µ–∫ –∏ –∏–Ω—Ñ–∏–ª–ª–∞)"
        )

        # üí° –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ —Å–Ω–∏–∑—É
        await update.message.reply_text(
            "üëá –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=kb_main()
        )

    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ STL")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        try:
            if op.exists(tmp_path):
                os.remove(tmp_path)
        except Exception:
            pass

# ---- healthcheck –¥–ª—è cron-job.org ----
async def healthcheck(request):
    return web.Response(text="OK")

# ---- aiohttp + webhook ----
async def run_bot():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    webhook_path = f"/webhook/{TOKEN.split(':')[0]}"

    web_app = web.Application()
    web_app.router.add_get("/ping", healthcheck)

    async def telegram_webhook(request):
        data = await request.json()
        await app.update_queue.put(Update.de_json(data, app.bot))
        return web.Response(text="ok")

    web_app.router.add_post(webhook_path, telegram_webhook)

    await app.bot.delete_webhook()
    await app.bot.set_webhook(f"{PUBLIC_URL}{webhook_path}")
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    print(f"‚úÖ Bot is running on {PUBLIC_URL}{webhook_path}")
    await app.initialize()
    await app.start()
    await asyncio.Event().wait()

def main():
    asyncio.run(run_bot())

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
